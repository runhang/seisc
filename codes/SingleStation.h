#pragma once

#ifndef SINGLESTATION_H
#define SINGLESTATION_H

#include "SingleChannel.h"
#include "MathUtils.h"

#include <vector>
#include <string>
#include <cstring>
#include <sstream>
#include <iostream>
#include <bitset>

using namespace std;

#ifndef  Int32
#define Int32 __int32
#endif

class SingleStation
{

public:

    // Get and Set function
	// Set function
	void setStationNumber(const Int32 & value);
	void setStationName(const char * value); //char[20];   //|   通道名称   |  字符串  |   12   |    |
	void setDigitType(const char* value); //char[10];
	void setDigitBite(const short & value);
	void setFullVoltage(const float & value);
	void setDigitRate(const Int32 & value);
	void setChannelNumber(const Int32 & value);
	void setTransferType(const short & value);
	void setTransferEquipment(const char * value);  //char[12];
	void setClockType(const short & value);
	void setClockEquipment(const char * value);  //char[12];
	void setClockDifference(const float & value);
	void setStationLatitude(const float & value);
	void setStationLongitude(const float & value);
	void setStationElevation(const float & value);
	void setAzimuth(const float & value);
	void setIncidence(const float & value);
	void setWeight(const Int32 & value);
	void setVelocityModel(const Int32 & value);
	void setSeimicMeterType(const Int32 & value);
	void setSeimicMeterName(const char * value);  //char[8]

	void SetIs4Bytes(const bool & value); //default true;
	void setSingleChannelDisplay(const bool & value); //default false;

	void setBadDataCount(const int & value);

	void setSingleChannels(const vector<SingleChannel> & value);
	void setDataUsableFlags(const vector<Int32> &);

	//Get Function
	Int32 getStationNumber()const;
	string getStationName()const; //char[20];
	string getDigitType()const; //char[10];
	short getDigitBite()const;
	float getFullVoltage()const;
	Int32 getDigitRate()const;
	Int32 getChannelNumber()const;
	short getTransferType()const;
	string getTransferEquipment()const;  //char[12];
	short getClockType()const;
	string getClockEquipment()const;  //char[12];
	float getClockDifference()const;
	float getStationLatitude()const;
	float getStationLongitude()const;
	float getStationElevation()const;
	float getAzimuth()const;
	float getIncidence()const;
	Int32 getWeight()const;
	Int32 getVelocityModel()const;
	Int32 getSeimicMeterType()const;
	string getSeimicMeterName()const;  //char[8]

	int getBadDataCount() const;

	bool getIs4Bytes()const;
	bool getSingleChannelDisplay()const;

	vector<SingleChannel>  getSingleChannels()const;
	vector<Int32> getDataUsableFlags()const;
	//Get and Set function end

	// function

	void read(ifstream & ifs);

	void readData(ifstream & ifs);

	void clear();
	
	string  toString();

	string  toStringBySingleChannel();

	string  toStringByStation();

	string  toStringOneChannel(int & channelIndex);

	string  toStringAllChangesData();

	//string toStringWaveData();

	SingleStation();
	SingleStation(const SingleStation & singleStation); //拷贝构造函数

	void operator =(const SingleStation & singleStation);

	~SingleStation();


protected:


private:
	Int32 stationNumber;            //|   台  站        |  长整型  |   4    |                          |  
	char* stationName; // = new char[20+1]; //|   台  名        |  字符串  |   20   |                          |  
	char* digitType = new char[10+1];  //|   数采型号      |  字符串  |   10   | 例如:EDAS-3               |  
	short digitBite;                //|   数采字长      |  短整型  |   2    | 例如:16                   |  
	float fullVoltage;                 //|   满幅电压      |  浮点型  |   4    | 例如:4.5 单位为伏          |  
	Int32 digitRate;                //|   采样率        |  长整型  |   4    | 例如:50                   |  
	Int32 channelNumber;                  //|   通道总数      |  长整型  |   4    | 例如:3                     |  
	short transferType;             //|   数据传输方式  |  短整型  |   2    | 注1:                        |  
	char* transferEquipment = new char[12+1]; //|   传输设备型号  |  字符串  |   12   | 例如:                       |  
	short clockType;                  //|   对时方式      |  短整型  |   2    | 注2:                        |  
	char* clockEquipment = new char[12+1]; //|   时钟型号      |  短整型  |   12   |  例如:GPS-121               |  
	float clockDifference;          //|   钟差          |  浮点型  |   4    | 例如:0.0                    |  
	float stationLatitude;          //|   纬度          |  浮点型  |   4    | 　　　　　                  |  
	float stationLongitude;         //|   经度          |  浮点型  |   4    | 　　　　　                  |  
	float stationElevation;         //|   高程          |  浮点型  |   4    | 　　　　　                  |  
	float azimuth;                  //|   方位角        |  浮点型  |   4    | 仅在经过坐标轴旋转后才有意义  |  
	float incidence;                //|   入射角        |  浮点型  |   4    | 仅在经过坐标轴旋转后才有意义  |  
	Int32 weight;                   //|   权重          |  短整型  |   4    | 0: 关, 1: 开                |  ? 2
	Int32 velocityModel;            //|   速度模型      |  短整型  |   4    | 注3:                        |  ? 2
	Int32 seimicMeterType;          //|   原始数据类型  |    整型  |   4    | 注4:                        |  
	char* seimicMeterName = new char[8+1]; //|   地震计型号    |   字符串 |   8    | 例如:FBS-3                  | ? 12 

	int badDataCount; //0：数据正常， 1：数据有异

	bool is4Bytes = true;
	bool singleChannelDisplay = false;

	vector<SingleChannel> singleChannels;
	vector<Int32> dataUsableFlags;

};

#endif

/*
% 附表1.6   台站参数结构表 (字长 120)
% +----------------------------------------------------------------------+
% |   项 目 名 称    |  类 型  |  字 长    |     备      注               |
% +----------------------------------------------------------------------+
% |   台  站        |  长整型  |   4       |                             |
% +----------------------------------------------------------------------+
% |   台  名        |  字符串  |   20      |                             |
% +----------------------------------------------------------------------+
% |   数采型号      |  字符串  |   10      | 例如:EDAS-3                  |
% +----------------------------------------------------------------------+
% |   数采字长      |  短整型  |   2       | 例如:16                      |
% +----------------------------------------------------------------------+
% |   满幅电压      |  浮点型  |   4       | 例如:4.5 单位为伏             |
% +----------------------------------------------------------------------+
% |   采样率        |  长整型  |   4       | 例如:50                      |    % 9.5数据采样率通常为50， 10.5数据采样率通常则为100。  %待确认%
% +----------------------------------------------------------------------+
% |   通道总数      |  长整型  |   4       | 例如:3                       |
% +----------------------------------------------------------------------+
% |   数据传输方式  |  短整型  |   2       | 注1:                         |
% +----------------------------------------------------------------------+
% |   传输设备型号  |  字符串  |   12      | 例如:                        |
% +----------------------------------------------------------------------+
% |   对时方式     |  短整型  |   2        | 注2:                         |
% +----------------------------------------------------------------------+
% |   时钟型号     |   字符串 |   12       |  例如:GPS-121                |
% +----------------------------------------------------------------------+
% |   钟差         |  浮点型  |   4        | 例如:0.0                     |
% +----------------------------------------------------------------------+
% |   纬度         |  浮点型  |   4        | 　　　　　                   |
% +----------------------------------------------------------------------+
% |   经度         |  浮点型  |   4        | 　　　　　                   |
% +----------------------------------------------------------------------+
% |   高程         |  浮点型  |   4        | 　　　　　                   |
% +----------------------------------------------------------------------+
% |   方位角       |  浮点型  |   4        | 仅在经过坐标轴旋转后才有意义　 |
% +----------------------------------------------------------------------+
% |   入射角       |  浮点型  |   4        | 仅在经过坐标轴旋转后才有意义   |
% +----------------------------------------------------------------------+
% |   权重         |  短整型  |   4        | 0: 关, 1: 开                 |  ? 2
% +----------------------------------------------------------------------+
% |   速度模型     |  短整型  |   4        | 注3:                         |   ? 2
% +----------------------------------------------------------------------+
% |   原始数据类型 |    整型  |   4        | 注4:                         |
% +----------------------------------------------------------------------+
% |   地震计型号   |   字符串 |   8        | 例如:FBS-3                   |     ? 12
% +----------------------------------------------------------------------+
%
% 注1）  数据传输方式定义有:
%        0:  无线传输
%        1:  有线传输
%        2:  有中继,无线、有线同时使用
%        10: 拨号数据传输
%        11: 介质邮递
% 注2）  对时方式定义有:
%        0:  GPS
%        1:  BPM   - 标准时间标准发播台
% 注3）  定位时计算台站震相走时所用速度模型,具体取值取决于速度结构文件,
%        祥参考有关近震定位中关于速度结构的说明.
% 注4）  原始数据类型指本台选用的地震计类型.


% 附表1.7   通道参数结构表 (字长 37056=120+36936(=3*12312=12288+12+4+4+4))
% +----------------------------------------------------------------------+
% |   项 目 名 称    |  类 型  |  字 长    |     备      注               |
% +----------------------------------------------------------------------+
% |   通道名称       |  字符串 |   12      |                              |
% +----------------------------------------------------------------------+
% |   通道编号       |  整型   |   4       |                              |
% +----------------------------------------------------------------------+
% |   增益因子       |  浮点   |   4       |                              |
% +----------------------------------------------------------------------+
% |   响应阶数       |  整型   |   4       |                              |
% +----------------------------------------------------------------------+
% |   响应数据       |  字符串 |   12288   | 预留为响应数据空间,具体存放方式|
% |                 |         |           | 见响应数据结构说明            |
% +----------------------------------------------------------------------+



% 响应数据结构。 如附表1.7所示，在通道参数中为响应数据预留了12288字节的空间。
%     具体响应数据的存放方式采用了分段描述的办法，即可以分别给出检波器、数采
%     及后续处理过程中不同阶段的频率响应特性，每一级别占有一段，每一段的具体
%     描述方法有可以有零、极点描述，FIR滤波器描述和按频率、灵敏度、相移给出
%     的响应曲线描述。同时约定，第一级为系统各级响应综合的总的系统响应按频率、
%     灵敏度、相移的描述。以后各段的响应依次按各自的类型结构排列。各段响应都
%     是归一化的，只有同通道参数中的转换因子相结合才能反映出真正的幅值响应。
%     具体各项结构见下列各表。

% 附表1.9   零、极点响应结构元素列表
% +----------------------------------------------------------------------+
% |   项 目 名 称    |  类 型  |  字 长    |     备      注               |
% +----------------------------------------------------------------------+
% |   响应类型       |  长整型 |   4       |                              |
% +----------------------------------------------------------------------+
% |   极点个数       |  长整型 |   4       |                              |
% +----------------------------------------------------------------------+
% |   极点参数表     |  复数   | 8*极点个数 | 注 1）                       |
% +----------------------------------------------------------------------+
% |   零点个数       |  长整型 |   4       |                              |
% +----------------------------------------------------------------------+
% |   零点参数表     |  复数   | 8*零点个数 |                              |
% +----------------------------------------------------------------------+
% 注1）  复数定义为用两个浮点数分别表示实部和虚部的数据结构。

% 附表1.10   FIR滤波器响应结构元素列表
% +----------------------------------------------------------------------+
% |   项 目 名 称    |  类 型  |  字 长    |     备      注               |
% +----------------------------------------------------------------------+
% |   响应类型       |  长整型 |   4       |                              |
% +----------------------------------------------------------------------+
% |   滤波器名称     |  字符串 |   20      |                              |
% +----------------------------------------------------------------------+
% |   滤波器系数个数 |  长整型 | 4         |                              |
% +----------------------------------------------------------------------+
% |   滤波器系数列表 |  浮点数 | 4*滤波器系 |                              |
% |                 |         |   数个数  |                              |
% +----------------------------------------------------------------------+

% 附表1.11    FAP响应结构元素列表
% +----------------------------------------------------------------------+
% |   项 目 名 称    |  类 型  |  字 长    |     备      注               |
% +----------------------------------------------------------------------+
% |   响应类型       |  长整数 |   4       |                              |
% +----------------------------------------------------------------------+
% |   频点个数       |  长整数 |   4       |                              |
% +----------------------------------------------------------------------+
% |   频率响应数据   | FAP结构 |  12       |                              |
% +----------------------------------------------------------------------+

% 附表1.12    FAP结构元素列表
% +----------------------------------------------------------------------+
% |   项 目 名 称    |  类 型  |  字 长    |     备      注               |
% +----------------------------------------------------------------------+
% |   频率          |  浮点数 |   4       |                              |
% +----------------------------------------------------------------------+
% |   对应频点灵敏度 |  浮点数 |   4       |  单位：μm/s                  |
% +----------------------------------------------------------------------+
% |   对应频点相移   |  浮点数 |   4       |                              |
% +----------------------------------------------------------------------+




% 波形数据块结构。一个台站一秒的数据块如下：

% 附表1.13   波形数据块结构
% +----------------------------------------------------------------------+
% |   项 目 名 称    |  类 型  |  字 长    |     备      注               |
% +----------------------------------------------------------------------+
% |   标志位         |  长整数 |   4       | 0：数据正常， 1：数据有异     |
% +----------------------------------------------------------------------+
% |   第一通道数据   |  void   |   块长    | 块长为采样率与采样字长的积，   |
% |                 |         |           | 采样字长的单位取字节.         |
% +----------------------------------------------------------------------+
% |   [第二通道数据  |  void   |   块长    |                              |
% +----------------------------------------------------------------------+
% |             ：  |         |           |                              |
% |       ：        |         |           |                              |
% +----------------------------------------------------------------------+
% |   第N通道数据]  |  void   |   块长     |                              |
% +----------------------------------------------------------------------+

*/